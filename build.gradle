apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'eclipse'

// Disable default test task
project.gradle.startParameter.excludedTaskNames.add('test')

// Set java compatibility version
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

// Specify source paths
sourceSets{
    main{
        java {
            srcDirs=['FONTS']
            exclude 'Testing'
        }
    }
    test{
        java{
            srcDirs=['FONTS/Testing']
        }
    }
}

// Main driver class (default gradle build task)
ext {
   javaMainClass = "Compressor"
}

application {
    mainClassName = javaMainClass
}


task FatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': "$mainClassName"
    }
    baseName = 'Compressor-PROP'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// Generates and places UnitTest_JPEG.jar using only the specified classes (ensure stub overrides)
task fatUnitTestJar(type: Jar) {
    //dependsOn clean
    includeEmptyDirs = false
    manifest {
        attributes 'Main-Class': "TestRunner"
    }
    baseName = "UnitTest_JPEG"

    //from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    //include "Compressor/JPEG.class"
    from { configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) } }
    //exclude "Compressor/Huffman.class"
    //include "org/junit/**", "junit/**", "org/hamcrest/**", "**LICENSE**" // meto licencias por motivos eticos ;D
    from sourceSets.test.output
    //include "**"
    //include "TestRunner.class", "UnitTest_JPEG.class", "Compressor/Huffman.class", "InputStream.class", "OutputStream.class",
    //    "Constants/JPEG_Quality.class", "ByteArrayInputStream.class", "ByteArrayOutputStream.class"
    with jar
    doLast {
        copy {
            from fileTree('build/libs/UnitTest_JPEG.jar')
            into 'EXE/UnitTest_JPEG.jar'
        }
    }
}

// Generate and run UnitTest_JPEG.jar
task UnitTest(type: JavaExec) {
  dependsOn fatUnitTestJar
  classpath = files("build/libs/UnitTest_JPEG.jar")
}

// Generate and place documentation
javadoc {
    dependsOn clean
    source = sourceSets.main.allJava
    options.memberLevel = JavadocMemberLevel.PRIVATE
    doLast {
        def folder = new File('DOCS/Documentation')
        if (!folder.exists()) {
            delete 'DOCS/Documentation'
        }
        project.file('DOCS/Documentation').mkdirs()
        copy {
            from fileTree('build/docs/javadoc')
            into 'DOCS/Documentation'
        }
    }
}

// Dependencies and repos
dependencies {
  testCompile 'junit:junit:4.12'
}

repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    mavenCentral()
}